#!/bin/bash

#TODO : fix finding package, add more referene

installDefaultPackage(){
    # task : install default package
    # parameter: none
    # return: none





    local reqPackage=( "git" "kakoune" "tmux") # defind the default package


    #confirm that package is not yet install on the system by using function findPackage
    local missingPackage=$(findPackage ${reqPackage[@]}) 
 
    
    for pac in ${missingPackage[@]};do #loop over list of packages, and try to install each package
        echo instaling $pac......
        if pacman -Syu --noconfirm $pac &>2;then
            echo -e "\e[32mInstall $pac successfully\e[0m"
            #if install successfully it will print install sucessfully
        else
            echo -e "\e[31mpackage $pac an error occured while downloading package\e[0m"
            #if it cant not install it will print package doesnt exist in local database or error occur
        fi
    done





}




 
findPackage(){
    # task : find missing package
    # parameter: package name
    # return: array of missing package
   
   
    local reqPackage+=($@) #defind package that user want to install
    declare -al missingPackage 
    #declear an emty array for package that will need to install (doesnt exist on the system)
  
    for i in ${reqPackage[@]};do #loop over list of packages, and check if each package is installed on the system by using pacman -Qq | grep $i
        if ! pacman -Qq $i >&/dev/null  ;then
            if pacman -Ss "^$i$" >&/dev/null;then 
                missingPackage+=("$i")
            else
                echo "can not find this package on local database" >&2
            fi
            
            
        
        else
            echo -e "\e[33m$i already exist\e[0m" >&2 
        fi
    done
    

    #https://stackoverflow.com/questions/2013396/mutable-list-or-array-structure-in-bash-how-can-i-easily-append-to-it
    #check if each package is installed on the system, if not then add to the array missing package

    
    #return the missing package (user want and it is not on the system)
    echo ${missingPackage[@]}



}



installPackage(){
    # task : install package
    # parameter: package name
    # return: none
   
    missingPackage=($(findPackage $@)) #run findPackage with positional argument to send the package names that user want to install, and if it not in the system yet, it will return back in to missingPackage variable 
  
   
    
    
    # loop over list of packages, and try to install each package
    for pac in ${missingPackage[@]};do
        echo instaling......
        if pacman -Syu --noconfirm --quiet  $pac &>/dev/null;then
            echo -e "\e[32mInstall $pac successfully\e[0m"
            #if install successfully it will print install sucessfully
        else
            echo -e "\e[31mpackage $pac doesnt exist in local database or an error occured\e[0m"
            #if it cant not install it will print package doesnt exist in local database or error occur
        fi
    done





    

    
    


    




}
export installPackage 
export installDefaultPackage



