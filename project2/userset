#!/bin/bash

# Check if this script is run with sudo privileges
# Source: https://askubuntu.com/questions/15853/how-can-a-script-check-if-its-being-run-as-root
if [[ $EUID -ne 0 ]]; then # Check effective user ID; if it’s not root (!id=0), then ask for permission.
    echo "Please run this script using the sudo command!"
    exit 1
fi

check_username_exists(){
    #   Task: Check if the username entered by the user already exists in the passwd file.
    #   Parameter: username($1)
    #   Return: 0,1
    
    #   Explanation:
    #   The function loops through the list of usernames in passwd. It checks if the name entered by the user matches any username in the passwd file.
    #   If it finds a match, it returns 1 (user exists).
    #   If it doesn't find a match, it returns 0 (user does not exist).
    

    local username=$1 # Get the username from positional argument 1 and make it local, as we don’t want other functions to use the username

    usedUserName=$(cut -d: -f1 /etc/passwd) # Get the list of all usernames in the passwd file using cut with delimiter “:”, and -f1 to get the first field (index 0) which is the username, then assign it to the usedUserName variable
    usedUserName=(${usedUserName[0]}) # Convert string to array
    
    # Loop over existing usernames (usedUserName). If the name provided by the user matches any of them, return 1 and echo "This username has already been used." This checks if the username entered by the user matches any existing username 
    for name in ${usedUserName[@]}; do # Start loop by iterating over usedUserName
        if [[ $name == $username ]]; then # Check if entered name is equal to any name in used names 
            echo "This username has already been used."
            return 1 # If it finds a match, return 1
        fi
    done
    
    return 0 # If loop finishes without finding a match, return 0
 
}
check_shellpath(){
    #   Task: Check if the shell path entered by the user exists (is a real shell available for use).
    #   Parameter: shellpath($1)
    #   Return: 0,1
    
    #   Explanation:
    # If the shell path is not available, return 1 and echo "Invalid shell path."
    # The function checks if the shell path is in the /etc/shells file.
    # If enterpath is null, return 0 because it will use the default shell (in create_user function).
    
    local userShell=$1 # Get the positional argument 1 and assign it to userShell
    if [[ ! -z $userShell ]]; then # Check if the username is not empty (null)
        shellList=$(tail -n +4 /etc/shells | cat) # Get the available shells (ignore the first 3 lines, using tail -n+4) and save them in the variable shellList
        shellList=(${shellList[0]}) # Convert string to array
        
        for shell in ${shellList[@]}; do # Looping over the available shell list
            if [[ $shell == $userShell ]]; then # If one of the shells matches the shell path entered by the user, return 0
                return 0
            fi
        done
        echo "Invalid shell path." # If loop completes with no shell path match, then echo and return 1
        return 1 
    fi
    return 0 # Return 0 if shell path is null, as another function will assign the default shell path if none is given
    
}
assign_user_id(){
    #  Task: Determine a new user ID from the existing users in the passwd file.
    #  Parameter: None
    #  Return: userID
    
    # Explanation:
    # It checks if the ID is taken or not. If not, it assigns it to the new user.
    # By looping from number 1000 (i=1000), it checks if the number matches any ID in the passwd file.
    # If i does not match any ID in the passwd file, then assign it to user; otherwise, increase i by one and loop again until it finds the available ID.

    
    # usedUserID stores the values of user IDs already created, by using cut with :(-d:) and selecting the third position (-f3) to get the ID number in the passwd file.
    usedUserID=$(cut -d ":" -f3 /etc/passwd) # usedUserID stores a list of existing user IDs
    
    # Convert string to array
    usedUserID=(${usedUserID[0]})
    local userID # Declare variable userID

    # The following code will try to assign the user ID by finding the available ID (an ID not in usedID)

    local i=1000 # Define variable i; i will be used as user ID when the condition is met (start from 1000 because of user ID)
    while [[ -z $userID ]];do # Start the loop by checking if the userID is still empty (not assigned yet)
        if [[ $i -eq 65534 ]];then # First, check that i is not 65534 as it needs to be preserved as the nobody user
            continue # If the condition is met, skip the rest of the loop and start a new loop
        fi

        if [[ ! ${usedUserID[@]} =~ $i ]];then # Check if i is not in usedID (available to use for the new user)
            userID=$i # If i is not in used ID, assign it to userID
            break # Stop the loop
        fi
        
        ((i++)) # At the end of each loop, increase the value of i by 1

    done
    
    echo $userID # Return userID

}
assign_group_id(){
    #   Task: Check if userID can be used as group ID (usually group ID matches userID).
    #   Parameter: userID($1) 
    #   Return: groupID
    
    local userID=$1 # Get the positional argument 1 and assign to local variable userID
    
    # Check if userID can be used as group ID (usually group ID matches userID).

    usedGroupID=$(cut -d ":" -f3 /etc/group) # Get all of the group IDs by using cut with delimiter “:” and get the third field (-f3) in the /etc/group file
    usedGroupID=(${usedGroupID[0]})
    if [[ ${usedGroupID[@]} =~  $userID ]]; then # If userID is already in group ID (meaning group ID is already taken and cannot use userID as group ID), then it will try to find a new group ID for the user group
        echo "User ID is not available to use as group ID." >&2 
        echo "Assigning new group ID..." >&2
        declare groupid # Declare an empty variable named groupid
        
        # Find an available group ID. Now, user ID and group ID will not match, but it will try to create a group ID for the user.

        local i=1000 # Define variable i; i will be used as group ID when the condition is met (starting from 1000)
        while [[ -z $groupid ]];do # Start the loop by checking if the groupid is still empty (not assigned yet)
            if [[ $i -eq 65534 ]];then # First, check that i is not 65534 as it needs to be preserved as the nobody group
                continue # If the condition is met, skip the rest of the loop and start a new loop
            fi

            if [[ ! ${usedGroupID[@]} =~ $i ]];then # Check if i is not in usedGroupID (available for the new user)
                groupid=$i # If i is not in used ID, assign it to groupid
                break # Stop the loop
            fi
            
            ((i++)) # At the end of each loop, increase the value of i by 1

        done
        echo $groupid # Return groupid

    else # This means userID is not in group ID, which means it’s available to use as group ID
        echo $userID # Return userID, which will be used as group ID
        
    fi
}

mkhomeDir(){
    #   Task:  Create a home directory for the user
    #   Parameter: userHome($1)
    #   Return: 0,1
    
    local userHome=$1 # Define the userHome variable from positional argument 1 
    
    # Create a home directory using mkdir
    if mkdir $userHome; then 
        echo "Home directory created successfully."
        
    else
        return 1
    fi
    
    # Copy the contents from /etc/skel to the newly created home directory 
    if cp -r /etc/skel/. $userHome; then
        echo "Settings copied from /etc/skel successfully."
        return 0
    else
        echo "An error occurred."
        return 1
    fi
}

create_user(){
    #   Task: Create user data that can be appended to the passwd and group files
    #   Parameter: username($1), userInfo($2), userShell($3)
    #   Return: 0,1
    
    #   Explanation:
    # 0. Check the arguments given to this function by using checking functions
    # 1. Assign variables (username, userShell, userHome, userID, groupid) and make them global
    # 2. Make a home directory for user (from the function mkhomeDir)
    # 3. Append user data to passwd file 
    # 4. Append user data to group file
    # 5. Change ownership of home directory
    # 6. Assign password to the user
    
    checking_func=(check_username_exists check_shellpath) # Define checking functions 
    checking_arguments=($1 $3) # Define the arguments to be passed to the functions
    for i in {0..1}; do # Loop twice (checking_func size)
        ${checking_func[$i]} ${checking_arguments[$i]} # Run the checking function with argument 
        if [[ $? -eq 1 ]]; then # Check if any exit code (also return) is equal to one
            return 1 # If any function returns one, stop script and return 1 (fail)
        fi
    done
   
    # 1 Assign positional arguments to username, userShell, userInfo, userID, groupid (all global variables)
    username=$1
    userShell=$3
    userHome="/home/$username"
    userInfo=$2
    userID=$(assign_user_id) # Run the function assign_user_id and assign it to userID
    groupid=$(assign_group_id $userID) # Run the assign_group_id and assign it to groupid
    
    # 1.1 Assign shell path if not provided
    # Check if the user provided a shell path. If not, set the shell to the default: /bin/bash
    if [[ -z $3 ]]; then # Check if positional argument (3) is empty 
        echo "No shell path provided, setting shell to default: /bin/bash" 
        userShell="/bin/bash" # Assign the default value (/bin/bash) to the userShell variable
    fi
    
    # 2. Make home directory
    if ! mkhomeDir $userHome ; then
        echo "Failed to create home directory"
        return 1
    fi
    
    # 3. Append user data to passwd file
    # make userdetail in form that can be appended to passwd file
    userdetail="$username:x:$userID:$groupid:$userInfo:$userHome:$userShell"
    # add the userdetail to /etc/passwd file by using a redirection operator >> (append)
    echo $userdetail >> /etc/passwd || { echo "Failed to add user to passwd file" >&2; return 1; }
    echo "User details added to passwd file" >&2 
    
    # 4. Append user data to group file
    # make groupDetail in form that can be appended to group file
    groupDetail=$username:x:$groupid:
    # add the groupDetail to /etc/group file by using a redirection operator >> (append)
    echo $groupDetail >> /etc/group || { echo "Failed to add user to group file" >&2; return 1; }
    
    # 5. Change ownership of home directory to the new user
    chown -R $username:$username $userHome || { echo "Failed to change ownership of home directory" >&2; return 1; }
    
    # 6. Assign password to the user
    enterpassword=false # set the variable enterpassword to false
    while [[ $enterpassword == false ]];do # start the while loop; run the loop if enterpassword is false
        if passwd $username; then # use passwd for user to create a password for the account
            enterpassword=true # if user adds password successfully change enterpassword to true (stop the loop)
        else
            echo "Please enter password again!" # if user fails to enter password then ask user again
        continue # loop again
        fi
    done

    # print the user information
    echo "------- User details -------"
    echo username: $username
    echo comment: $userInfo
    echo shell: $userShell
    echo home: $userHome
    echo userid: $userID
    echo groupid: $groupid
    echo "------- User details -------"
    # reference 
    # https://askubuntu.com/questions/678915/whats-the-difference-between-and-in-bash
}

adduserGroup(){
    #   Task: Add user to existing group (in /etc/group)
    #   Parameter: groupname
    #   Return: 0,1
    
    #   Explanation:
    # The adduserGroup function will add the user to the group specified by the user by checking the group name in /etc/group file. If it exists, it will add the user to the group; otherwise, it will stop the function.
    
    local entergroup=($@) # Assign the positional argument to the variable entergroup

    if [[ -z $entergroup ]]; then
        return 0
    fi

    groupNames=$(cut -d: -f1 /etc/group) # Get all group names in /etc/group using cut from ":" and get the first field from the group file
    groupNames=(${groupNames[0]}) # Convert string to list
    
    for group in ${entergroup[@]};do # Loop through list of groups entered by the user 

        if ! echo "${groupNames[@]}" | grep -wq "$group" ; then # Check if the group entered exists in the file by trying grep from the groupNames; if it fails, it will fall into if statement
            # using -w to select only those lines containing matches that form whole words
            # using -q to not write anything out to standard output
            echo "The $group group you’re trying to add the user to does not exist!" # Inform the user if group doesn’t exist
            continue 

        else # If the group exists, try to add the user to the /etc/group file
            # Get the group name in the file /etc/group by using awk
            # Separate each position by -F:, -v to pass the value to awk
            # Check if the first field on any line matches the group
            # if the group matches any existing group then it assigns it to variable group match
            groupmatch=$(awk -F: -v group="$group" '$1 == group {print}' /etc/group)
            # grep -n to get the line of group match with line number 
            # cut on field one to get the line number of group match
            numberline=$(grep -n $groupmatch /etc/group | cut -d: -f1) 
            # grep the group match with -n to get the group
            # cut on filed five to get the list of the group member of the group match
            groupmember=$(grep -n $groupmatch /etc/group | cut -d: -f5) 

            if [[ -z $groupmember ]]; then 
                # sed -i to edit the file
                # sed -i numbers to tell which line to edit and $ to edit at the end of the line (in /etc/group file)
                sed -i "${numberline}s/$/$username/" /etc/group # Insert the username at the end of the line 
            else
                sed -i "${numberline}s/$/,$username/" /etc/group # Insert the username with a comma before the name at the end of the line
            fi

            echo "User added to group ${group} successfully!" 
        fi
    done
    return 0
       #reference 
    #https://www.geeksforgeeks.org/cut-command-linux-examples/
    #https://www.geeksforgeeks.org/awk-command-unixlinux-examples/
    
}

while getopts "s:m:g:hpc:" opt; do # Using getopts and while loop to get the flag when script is called 
    # in each flag, assign variable to the flag and make it true when it is called, and collect the optarg when flag is called and store it in variable
    case $opt in
        m)
            m_flag=true
            enterName=${OPTARG} 
        ;;
        s)
            s_flag=true
            enterShell=${OPTARG}
        ;;
        g)
            g_flag=true
            enterGroup=${OPTARG}
        ;;
        c)
            c_flag=true
            enterComment=${OPTARG}
        ;;
        ?)
            echo "Invalid flag" 
        ;;
    esac
done

if [[ -z $@ ]]; then # check if no argument provide then provide user about script detail
    echo "Usage: sudo userSet [OPTION].....
    -m <username> create user
    -s <shellPath> assign shell path (optional) 
    -g <groupname> add user to the existing group (optional)
    -c <comment> to add comment (optional)"
elif [[ ! $m_flag ]]; then # Check if script is called without m flag
    echo "This script requires -m <user name>" 
elif [[ $m_flag && $g_flag ]]; then # Check if the flags m and g are called; then the script should call create_user and adduserGroup functions
    create_user "$enterName" "$enterComment" "$enterShell"
    if [[ $? -eq 0 ]]; then # Check if exit code of create_user is 0, then run adduserGroup 
      
        echo "Adding group..."
        adduserGroup "$enterGroup"
    fi
else
    create_user "$enterName" "$enterComment" "$enterShell" # If there is an m flag, then run create_user (other flags are optional)
fi

### Note: The m flag is always required, but the other flags can be empty (argument can be empty) as the functions will handle it. 

# Links
# https://www.baeldung.com/linux/find-available-shells#:~:text=To%20find%20available%20shells%20on,shells%20installed%20on%20the%20system.
# https://stackoverflow.com/questions/62887981/modifying-a-particular-line-in-a-text-file-from-the-command-line
